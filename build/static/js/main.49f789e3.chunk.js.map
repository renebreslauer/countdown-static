{"version":3,"sources":["Countdown.js","CountdownBox.js","helpers/daysInYear.js","components/Hero.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["interval","CountdownBox","left","label","divideBy","className","Countdown","date","now","Date","selectedDate","millisecondsLeft","getTime","dLeft","Math","floor","daysInSelectedYear","year","isLeapYear","getFullYear","yearsLeft","daysLeft","hoursLeft","minutesLeft","secondsLeft","yearsLeftOutput","daysLeftOutput","hoursLeftOutput","minutesLeftOutput","secondsLeftOutput","useState","completed","setCompleted","years","days","hours","minutes","seconds","timeLeft","setTimeLeft","useEffect","clearInterval","setInterval","class","Hero","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2JAKIA,E,sDCcWC,EAhBM,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAgBC,GAAY,EAAtBC,SAAsB,EAAZD,OACtC,OACE,sBAAKE,UAAU,iBAAf,UACE,qBAAKA,UAAU,sBAAf,SAAsCH,IAEtC,mBAAGG,UAAU,uBAAb,SAAqCF,QDoG5BG,EArGG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACbC,EAAM,IAAIC,KACVC,EAAe,IAAID,KAAKF,GACxBI,EAAmBD,EAAaE,UAAYJ,EAAII,UAChDC,EAAQC,KAAKC,MAAMJ,EAAgB,OACnCK,EEZW,SAACC,GAClB,OAAOA,EAAO,MAAQ,GAAMA,EAAO,MAAQ,GAAKA,EAAO,IAAM,EAItDC,CFO+BR,EAAaS,eEPzB,IAAM,IFS1BC,EAAYN,KAAKC,MAAMF,EAAQG,GAC/BK,EAAWR,GAAS,EAAI,EAAIA,EAAQO,EAAYJ,EAChDM,EAAYR,KAAKC,MAAOJ,EAAgB,KAAuB,IAC/DY,EAAcT,KAAKC,MAAOJ,EAAgB,IAAkB,IAC5Da,EAAcV,KAAKC,MAAOJ,EAAmB,IAAQ,IAErDc,EAAkBL,EAAY,GAAK,IAAMA,EAAYA,EACrDM,EAAiBL,EAAW,GAAK,IAAMA,EAAWA,EAClDM,EAAkBL,EAAY,GAAK,IAAMA,EAAYA,EACrDM,EAAoBL,EAAc,GAAK,IAAMA,EAAcA,EAC3DM,EAAoBL,EAAc,GAAK,IAAMA,EAAcA,EAjBnC,EAmBIM,oBAAS,GAnBb,mBAmBvBC,EAnBuB,KAmBZC,EAnBY,OAoBEF,mBAAS,CACvCG,MAAOb,EAAY,EAAIK,EAAkB,KACzCS,KAAMb,EAAW,EAAIK,EAAiB,KACtCS,MAAOb,EAAY,EAAIK,EAAkB,KACzCS,QAASb,EAAc,EAAIK,EAAoB,KAC/CS,QAASb,EAAc,EAAIK,EAAoB,OAzBnB,mBAoBvBS,EApBuB,KAoBbC,EApBa,KA8E9B,OAlDAC,qBAAU,WACJT,GACFU,cAAczC,KAEf,CAAC+B,IAEJS,qBAAU,WAwBR,OAvBKT,IACH/B,EAAW0C,aAAY,WACjB/B,EAAmB,EACrB4B,EAAY,CACVN,MAAOR,EACPS,KAAMR,EACNS,MAAOR,EACPS,QAASR,EACTS,QAASR,KAGXU,EAAY,CACVN,MAAO,KACPC,KAAM,KACNC,MAAO,KACPC,QAAS,KACTC,QAAS,OAEXL,GAAa,MAEd,MAGE,WACLS,cAAczC,MAEf,CACDU,EACAF,EACAuB,EACAX,EACAC,EACAC,EACAC,EACAC,EACAb,EACAc,EACAC,EACAC,EACAC,EACAC,IAIA,cAAC,WAAD,UACE,sBAAKxB,UAAU,YAAf,UACE,wDACA,sBAAKsC,MAAM,yBAAX,UACE,cAAC,EAAD,CACEzC,KAAMoC,EAASJ,KACf9B,SAAUY,EACVb,MAAM,SAER,cAAC,EAAD,CAAcD,KAAMoC,EAASH,MAAO/B,SAAU,GAAID,MAAM,UACxD,cAAC,EAAD,CAAcD,KAAMoC,EAASF,QAAShC,SAAU,GAAID,MAAM,YAC1D,cAAC,EAAD,CAAcD,KAAMoC,EAASD,QAASjC,SAAU,GAAID,MAAM,qB,KGjFrDyC,MAZf,WACE,OACE,qBAAKD,MAAM,eAAX,SACE,qBAAKA,MAAM,kBAAX,SACE,qBAAKtC,UAAU,UAAf,SACE,cAAC,EAAD,CAAWE,KAAK,uCCCXsC,MARf,WACE,OACE,qBAAKF,MAAM,iBAAX,SACE,qBAAKA,MAAM,cCSFG,MATf,WACE,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.49f789e3.chunk.js","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport daysInYear from './helpers/daysInYear'\nimport CountdownBox from './CountdownBox'\n\nlet interval\n\nconst Countdown = ({ date }) => {\n  const now = new Date()\n  const selectedDate = new Date(date)\n  const millisecondsLeft = selectedDate.getTime() - now.getTime()\n  const dLeft = Math.floor(millisecondsLeft / (1000 * 60 * 60 * 24))\n  const daysInSelectedYear = daysInYear(selectedDate.getFullYear())\n\n  const yearsLeft = Math.floor(dLeft / daysInSelectedYear)\n  const daysLeft = dLeft <= 0 ? 0 : dLeft - yearsLeft * daysInSelectedYear\n  const hoursLeft = Math.floor((millisecondsLeft / (1000 * 60 * 60)) % 24)\n  const minutesLeft = Math.floor((millisecondsLeft / (1000 * 60)) % 60)\n  const secondsLeft = Math.floor((millisecondsLeft / 1000) % 60)\n\n  const yearsLeftOutput = yearsLeft < 10 ? '0' + yearsLeft : yearsLeft\n  const daysLeftOutput = daysLeft < 10 ? '0' + daysLeft : daysLeft\n  const hoursLeftOutput = hoursLeft < 10 ? '0' + hoursLeft : hoursLeft\n  const minutesLeftOutput = minutesLeft < 10 ? '0' + minutesLeft : minutesLeft\n  const secondsLeftOutput = secondsLeft < 10 ? '0' + secondsLeft : secondsLeft\n\n  const [completed, setCompleted] = useState(false)\n  const [timeLeft, setTimeLeft] = useState({\n    years: yearsLeft > 0 ? yearsLeftOutput : '00',\n    days: daysLeft > 0 ? daysLeftOutput : '00',\n    hours: hoursLeft > 0 ? hoursLeftOutput : '00',\n    minutes: minutesLeft > 0 ? minutesLeftOutput : '00',\n    seconds: secondsLeft > 0 ? secondsLeftOutput : '00',\n  })\n\n  useEffect(() => {\n    if (completed) {\n      clearInterval(interval)\n    }\n  }, [completed])\n\n  useEffect(() => {\n    if (!completed) {\n      interval = setInterval(() => {\n        if (millisecondsLeft > 0) {\n          setTimeLeft({\n            years: yearsLeftOutput,\n            days: daysLeftOutput,\n            hours: hoursLeftOutput,\n            minutes: minutesLeftOutput,\n            seconds: secondsLeftOutput,\n          })\n        } else {\n          setTimeLeft({\n            years: '00',\n            days: '00',\n            hours: '00',\n            minutes: '00',\n            seconds: '00',\n          })\n          setCompleted(true)\n        }\n      }, 1000)\n    }\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [\n    selectedDate,\n    now,\n    completed,\n    yearsLeft,\n    daysLeft,\n    hoursLeft,\n    minutesLeft,\n    secondsLeft,\n    millisecondsLeft,\n    yearsLeftOutput,\n    daysLeftOutput,\n    hoursLeftOutput,\n    minutesLeftOutput,\n    secondsLeftOutput,\n  ])\n\n  return (\n    <Fragment>\n      <div className=\"countdown\">\n        <h2>Your Workout Begins In</h2>\n        <div class=\"countdown-item-wrapper\">\n          <CountdownBox\n            left={timeLeft.days}\n            divideBy={daysInSelectedYear}\n            label=\"days\"\n          />\n          <CountdownBox left={timeLeft.hours} divideBy={24} label=\"hours\" />\n          <CountdownBox left={timeLeft.minutes} divideBy={60} label=\"minutes\" />\n          <CountdownBox left={timeLeft.seconds} divideBy={60} label=\"seconds\" />\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nCountdown.propTypes = {\n  date: PropTypes.string.isRequired,\n}\n\nexport default Countdown\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst CountdownBox = ({ left, divideBy, label }) => {\n  return (\n    <div className=\"countdown__box\">\n      <div className=\"countdown__box_left\">{left}</div>\n\n      <p className=\"countdown__box_label\">{label}</p>\n    </div>\n  )\n}\n\nCountdownBox.propTypes = {\n  left: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  divideBy: PropTypes.number.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nexport default CountdownBox\n","const isLeapYear = (year) => {\n  return year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)\n}\n\nexport default (year) => {\n  return isLeapYear(year) ? 366 : 365\n}\n","import React from 'react'\nimport Countdown from '../Countdown'\nimport '../App.scss'\n\nfunction Hero() {\n  return (\n    <div class=\"hero-wrapper\">\n      <div class=\"image-container\">\n        <div className=\"wrapper\">\n          <Countdown date=\"January 18 2021 08:06 GMT-5\" />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Hero\n","import React from 'react'\n\nfunction Footer() {\n  return (\n    <div class=\"footer-wrapper\">\n      <div class=\"footer\"></div>\n    </div>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport Hero from './components/Hero'\nimport Footer from './components/Footer'\nimport './App.scss'\n\nfunction App() {\n  return (\n    <>\n      <Hero />\n      <Footer />\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}